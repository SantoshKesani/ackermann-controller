@startuml

participant Test

Test -> MockPlant: getState(s, h)
activate MockPlant

Test -> Controller: setState(s, h)
Controller -> Model: setState(s, h)

Test -> Controller: setGoal(s, h)
Controller -> Model: setGoal(s, h)

Test -> Controller: start()
activate Controller
Controller -> Controller: While Loop
activate Controller
activate Model
activate PID_s
activate PID_h
activate Limits

Controller -> Model: getError()
Model -> Controller: error_s, error_h

Controller -> PID_s: getCommand(error_s)
PID_s -> Controller: throttle_des

Controller -> PID_h: getCommand(error_h)
PID_h -> Controller: steering_des

Controller -> Limits: limit(throttle_des, steering_des)
Limits -> Controller: throttle, steering

Controller -> Model: command(throttle, steering)
Controller -> Controller: sleep()

deactivate Controller
deactivate Model
deactivate PID_s
deactivate PID_h
deactivate Limits

Test -> Controller: getCommand()
Controller -> Test: throttle, steering
Test -> MockPlant: command(throttle, steering)
Test -> MockPlant: getState()
MockPlant -> Test: speed, heading

Test -> Controller: stop()
deactivate Controller

@enduml




